/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package VIEW;

import DAO.SaidaDAO;
import DTO.SaidaDTO;
import java.awt.event.ItemEvent;

import java.awt.event.ItemListener;
import DAO.ConexaoBD;
import DAO.MateriaisDAO;
import DTO.MateriaisDTO;
import VIEW.TelaListaMateriais;
import java.awt.GridBagLayout;
import java.awt.KeyboardFocusManager;

import java.sql.Connection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;

import java.awt.event.ItemEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import java.sql.ResultSet;
import java.util.Vector;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;

import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;

import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

import javax.swing.JPopupMenu;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.sql.PreparedStatement;

import java.sql.DriverManager;
import java.text.DecimalFormat;
import java.util.HashSet;
import java.util.Set;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.util.OS;

/**
 *
 * @author jateixeira
 */
public class TelaSaidaView extends javax.swing.JFrame {
    

    private DefaultComboBoxModel<String> modelComboBox;
    private Connection connection;
    private JComboBox<String> comboBox;
    private DefaultComboBoxModel<String> modelLocalBox;
    private DefaultComboBoxModel<String> modelLocalBox1;
    
    

    /*  private JPopupMenu popupMenu;
            private List<JCheckBox> checkBoxes;
            private List<String> selectedMaterials;*/
    /**
     * Creates new form TelaObrasView
     */
    public TelaSaidaView() throws ClassNotFoundException, SQLException {
        setLayout(new GridBagLayout());
        initComponents();
        setLocationRelativeTo(null);
        initializeDatabaseConnection();
       OSFieldCad.setVisible(false);
        
        
        

        // Inicializa o modelo do JComboBox
        modelLocalBox = new DefaultComboBoxModel<>();
        modelComboBox = new DefaultComboBoxModel<>();
        NomeMaterialField.setModel(modelComboBox);
        LocalBox2.setModel(modelLocalBox);
        comboBox = new JComboBox<>();
        

        setupAutocomplete();
        populateComboBox();
        populateLocalBox();
        populateLocalBox1();
       
        
        
        AutoCompleteDecorator.decorate(NomeMaterialField);
        AutoCompleteDecorator.decorate(NomeMaterialField);
        AutoCompleteDecorator.decorate(LocalBox2);
        AutoCompleteDecorator.decorate(LocalBox1);

        NomeMaterialField.setSelectedIndex(-1);
        LocalBox2.setSelectedIndex(-1);
        LocalBox1.setSelectedIndex(-1);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        ConParametros = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        OSFieldCon = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        LocalBox1 = new javax.swing.JComboBox<>();
        EditarBtn = new javax.swing.JButton();
        BtnApagar = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        RequisitanteBox1 = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        MedicaoGeralBox2 = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        CalendarioField = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        CodigoMaterialField = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        BtnCadastroObras = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        NomeMaterialField = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        RequisitanteBox = new javax.swing.JComboBox<>();
        MedicaoGeralBox1 = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        LocalBox2 = new javax.swing.JComboBox<>();
        OSFieldCad = new javax.swing.JTextField();
        QuantidadeMaterialField = new javax.swing.JFormattedTextField();
        jButton6 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        VoltarBtnObras = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tela de Saída");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Consulta das Saídas"));

        ConParametros.setBackground(new java.awt.Color(102, 204, 255));
        ConParametros.setText("CONSULTAR");
        ConParametros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConParametrosActionPerformed(evt);
            }
        });

        jLabel4.setText("OS:");

        jButton2.setText("EXPORTAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        OSFieldCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OSFieldConActionPerformed(evt);
            }
        });

        jLabel13.setText("Local:");

        LocalBox1.setEditable(true);
        LocalBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocalBox1ActionPerformed(evt);
            }
        });

        EditarBtn.setBackground(new java.awt.Color(255, 255, 255));
        EditarBtn.setForeground(new java.awt.Color(0, 0, 0));
        EditarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Lapis-icon.png"))); // NOI18N
        EditarBtn.setBorder(null);
        EditarBtn.setContentAreaFilled(false);
        EditarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarBtnActionPerformed(evt);
            }
        });

        BtnApagar.setBackground(new java.awt.Color(255, 0, 0));
        BtnApagar.setForeground(new java.awt.Color(255, 255, 255));
        BtnApagar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/54324.png"))); // NOI18N
        BtnApagar.setBorder(null);
        BtnApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnApagarActionPerformed(evt);
            }
        });

        jLabel16.setText("REQUISITANTE:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "OS", "Nome do Material", "Código Material", "Quantidade", "Data", "Requisitante", "Responsável"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        RequisitanteBox1.setEditable(true);
        RequisitanteBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Secretário", "Diretor", "GIP" }));
        RequisitanteBox1.setSelectedIndex(-1);

        jLabel17.setText("RESPONSÁVEL:");

        MedicaoGeralBox2.setEditable(true);
        MedicaoGeralBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sérgio", "Douglas", "Jeferson", "Luiz Carlos" }));
        MedicaoGeralBox2.setSelectedIndex(-1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(LocalBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(OSFieldCon, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(RequisitanteBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(MedicaoGeralBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ConParametros, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EditarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BtnApagar, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EditarBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ConParametros)
                                    .addComponent(OSFieldCon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LocalBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(RequisitanteBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MedicaoGeralBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(BtnApagar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Saída"));

        jLabel5.setText("DATA:");

        try {
            CalendarioField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel6.setText("CÓDIGO ITEM:");

        CodigoMaterialField.setDropMode(javax.swing.DropMode.INSERT);
        CodigoMaterialField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CodigoMaterialFieldActionPerformed(evt);
            }
        });
        CodigoMaterialField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CodigoMaterialFieldKeyPressed(evt);
            }
        });

        jLabel7.setText("NOME ITEM:");

        BtnCadastroObras.setBackground(new java.awt.Color(102, 204, 255));
        BtnCadastroObras.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        BtnCadastroObras.setForeground(new java.awt.Color(255, 255, 255));
        BtnCadastroObras.setText("REGISTRAR SAÍDA");
        BtnCadastroObras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCadastroObrasActionPerformed(evt);
            }
        });

        jLabel1.setText("QUANTIDADE:");

        NomeMaterialField.setEditable(true);
        NomeMaterialField.setInheritsPopupMenu(true);
        NomeMaterialField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NomeMaterialFieldActionPerformed(evt);
            }
        });

        jButton3.setForeground(new java.awt.Color(0, 0, 0));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/interrogaçãopqn.jpg"))); // NOI18N
        jButton3.setBorder(null);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel14.setText("REQUISITANTE:");

        RequisitanteBox.setEditable(true);
        RequisitanteBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Secretário", "Diretor", "GIP" }));

        MedicaoGeralBox1.setEditable(true);
        MedicaoGeralBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sérgio", "Douglas", "Jeferson", "Luiz Carlos" }));
        MedicaoGeralBox1.setSelectedIndex(-1);

        jLabel15.setText("RESPONSÁVEL:");

        jLabel2.setText("LOCAL:");

        LocalBox2.setEditable(true);
        LocalBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocalBox2ActionPerformed(evt);
            }
        });

        OSFieldCad.setEditable(false);

        QuantidadeMaterialField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        QuantidadeMaterialField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantidadeMaterialFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(CalendarioField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel14))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(CodigoMaterialField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)))
                .addGap(18, 18, 18)
                .addComponent(NomeMaterialField, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(QuantidadeMaterialField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(RequisitanteBox, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(MedicaoGeralBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(OSFieldCad, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(LocalBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(30, 30, 30))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(BtnCadastroObras, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(QuantidadeMaterialField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(NomeMaterialField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CodigoMaterialField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CalendarioField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(RequisitanteBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(LocalBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MedicaoGeralBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnCadastroObras)
                    .addComponent(OSFieldCad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/pref png1.png"))); // NOI18N
        jButton6.setBorder(null);
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/edit.png"))); // NOI18N
        jLabel3.setText("CADASTRO DE SAÍDA:");

        VoltarBtnObras.setBackground(new java.awt.Color(153, 153, 153));
        VoltarBtnObras.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        VoltarBtnObras.setForeground(new java.awt.Color(255, 255, 255));
        VoltarBtnObras.setText("VOLTAR");
        VoltarBtnObras.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        VoltarBtnObras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VoltarBtnObrasActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/query_icon_216695.png"))); // NOI18N
        jLabel10.setText("CONSULTA DE SAÍDA:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(439, 439, 439)
                .addComponent(jLabel3)
                .addGap(0, 523, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addGap(389, 389, 389))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(VoltarBtnObras, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(457, 457, 457)
                        .addComponent(jLabel10)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VoltarBtnObras)
                .addGap(249, 249, 249))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 861, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void VoltarBtnObrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VoltarBtnObrasActionPerformed

        TelaMenuView telamenus = new TelaMenuView();
        telamenus.setVisible(true);

        this.dispose();

    }//GEN-LAST:event_VoltarBtnObrasActionPerformed

    private void BtnCadastroObrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCadastroObrasActionPerformed
        
        try {
            String OS, NomeMaterial, CodigoMaterial, Quantidade, Data, Requisitante, Responsavel, Local;

            OS = OSFieldCad.getText();
            NomeMaterial = (String) NomeMaterialField.getSelectedItem();
            CodigoMaterial = CodigoMaterialField.getText();
            Quantidade = QuantidadeMaterialField.getText();
            Data = CalendarioField.getText();
            Requisitante = (String )RequisitanteBox.getSelectedItem();
            Responsavel = (String )MedicaoGeralBox1.getSelectedItem();
            Local = (String )LocalBox2.getSelectedItem();
            
            
            
            //replace para colocar o sinal de negativo no número do negativo
           Quantidade = QuantidadeMaterialField.getText();
        if (!Quantidade.isEmpty() && Integer.parseInt(Quantidade) > 0 && !Quantidade.startsWith("-")) {
            Quantidade = "-" + Quantidade; // Adiciona o sinal de menos se necessário
        }
            

            SaidaDTO servicoDto = new SaidaDTO();

            servicoDto.setOS(OS);
            servicoDto.setNomeMaterial(NomeMaterial);
            servicoDto.setCodigoMaterial(CodigoMaterial);
            servicoDto.setQuantidade(Quantidade);
            servicoDto.setData_saida(Data);
            servicoDto.setRequisitante(Requisitante);
            servicoDto.setResponsavel(Responsavel);
            servicoDto.setLocal(Local);
           

            SaidaDAO servicoDao = new SaidaDAO();
            servicoDao.CadastrarExecucao(servicoDto);

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro! Cadastro não realizado, confira se todos os campos foram preenchidos");
            Logger.getLogger(TelaSaidaView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
   
        QuantidadeMaterialField.setText("");
        NomeMaterialField.setSelectedIndex(-1);
    }//GEN-LAST:event_BtnCadastroObrasActionPerformed

    private void NomeMaterialFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NomeMaterialFieldActionPerformed
      
           updateTextFields();
    }//GEN-LAST:event_NomeMaterialFieldActionPerformed

    private void ConParametrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConParametrosActionPerformed
       try{
             ListarMedicoes(); 
        }
        catch (Exception erro){
            JOptionPane.showMessageDialog(null, "não há registros identificados" + erro);
        }
    }//GEN-LAST:event_ConParametrosActionPerformed
    
    private void CodigoMaterialFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CodigoMaterialFieldActionPerformed
        updateNomeItem();
    }//GEN-LAST:event_CodigoMaterialFieldActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            exportarParaPlanilha((String) LocalBox1.getSelectedItem(), OSFieldCon.getText(), (String) RequisitanteBox1.getSelectedItem(), (String) MedicaoGeralBox2.getSelectedItem());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaSaidaView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
            TelaListaMateriais telaLista = new TelaListaMateriais();
            telaLista.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void OSFieldConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OSFieldConActionPerformed
        
    }//GEN-LAST:event_OSFieldConActionPerformed

    private void LocalBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalBox1ActionPerformed
        
    }//GEN-LAST:event_LocalBox1ActionPerformed

                                            

    private void BtnApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnApagarActionPerformed
            int linhaSelecionada = jTable1.getSelectedRow();
       if (linhaSelecionada != -1) {
    int resposta = JOptionPane.showConfirmDialog(
        null,
        "Tem certeza que deseja apagar este item?",
        "Confirmação",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE
    );

    if (resposta == JOptionPane.YES_OPTION) {
        try {
            // Acessando as colunas corretas
            
            String nomeItem = (String) jTable1.getValueAt(linhaSelecionada, 1); // Nome Item
            String codigoItem = (String) jTable1.getValueAt(linhaSelecionada, 2); // Codigo Item
            String Data_saida = (String) jTable1.getValueAt(linhaSelecionada, 4); // Codigo Item
            
            // Remover a linha do modelo
            ((DefaultTableModel) jTable1.getModel()).removeRow(linhaSelecionada);
            
            // Chamar método para remover do banco de dados
            removerDoBanco( nomeItem, codigoItem, Data_saida);
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao acessar os dados da tabela. Verifique os índices.");
            ex.printStackTrace();
        }
    } else {
        // O usuário escolheu não apagar
        JOptionPane.showMessageDialog(null, "Operação cancelada.");
    }
} else {
    JOptionPane.showMessageDialog(null, "Selecione uma linha para apagar.");
}
    

    }//GEN-LAST:event_BtnApagarActionPerformed

    private void EditarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarBtnActionPerformed
       int linhaSelecionada = jTable1.getSelectedRow();
    if (linhaSelecionada != -1) {
        // Recuperar dados da linha selecionada
        
       
        String nomeItem = (String) jTable1.getValueAt(linhaSelecionada, 1);
        String codigoItem = (String) jTable1.getValueAt(linhaSelecionada, 2);
        String quantidade = (String) jTable1.getValueAt(linhaSelecionada, 3);
        String data = (String) jTable1.getValueAt(linhaSelecionada, 4);
        String Requisitante = (String) jTable1.getValueAt(linhaSelecionada, 5);
        String Responsavel = (String) jTable1.getValueAt(linhaSelecionada, 6);


        // Obter novos valores
        

        String novoNomeItem = JOptionPane.showInputDialog("Nome Material:", nomeItem);
        String novoCodigoItem = JOptionPane.showInputDialog("Código:", codigoItem);
        String novaQuantidade = JOptionPane.showInputDialog("Quantidade:", quantidade);
        String novaData = JOptionPane.showInputDialog("Data:", data);
        String novaRequisitante = JOptionPane.showInputDialog("Requisitante:", Requisitante);
        String novoResponsavel = JOptionPane.showInputDialog("Responsavel:", Responsavel);


        // Chamar método para editar no banco de dados
        editarNoBanco( novoNomeItem,codigoItem,  novoCodigoItem, novaQuantidade,
                       novaData, novaRequisitante, novoResponsavel);
        
        // Atualizar a linha na tabela
       

        jTable1.setValueAt(novoNomeItem != null ? novoNomeItem : nomeItem, linhaSelecionada, 0);
        jTable1.setValueAt(novoCodigoItem != null ? novoCodigoItem : codigoItem, linhaSelecionada, 1);
        jTable1.setValueAt(novaQuantidade != null ? novaQuantidade : quantidade, linhaSelecionada, 2);

        jTable1.setValueAt(novaData != null ? novaData : data, linhaSelecionada, 3);
        jTable1.setValueAt(novaRequisitante != null ? novaRequisitante : Requisitante, linhaSelecionada, 4);
        jTable1.setValueAt(novoResponsavel != null ? novoResponsavel : Responsavel, linhaSelecionada, 5);


        
    } else {
        JOptionPane.showMessageDialog(null, "Selecione uma linha para editar.");
    }
    }//GEN-LAST:event_EditarBtnActionPerformed

    private void CodigoMaterialFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CodigoMaterialFieldKeyPressed
         
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
        // Cancela o evento padrão do TAB
        evt.consume();
        
        // Simula a ação do Enter (por exemplo, processar o texto)
        System.out.println("Enter pressed: " + CodigoMaterialField.getText());
        
        // Move o foco para o próximo componente (se houver)
        KeyboardFocusManager.getCurrentKeyboardFocusManager().focusNextComponent();
    }
    }//GEN-LAST:event_CodigoMaterialFieldKeyPressed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
         TelaMenuView menu = new TelaMenuView();
       menu.setVisible(true);
       
       this.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void LocalBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalBox2ActionPerformed
       updateLocal();
    }//GEN-LAST:event_LocalBox2ActionPerformed

    private void QuantidadeMaterialFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantidadeMaterialFieldActionPerformed
      
    }//GEN-LAST:event_QuantidadeMaterialFieldActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new TelaSaidaView().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(TelaSaidaView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(TelaSaidaView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnApagar;
    private javax.swing.JButton BtnCadastroObras;
    private javax.swing.JFormattedTextField CalendarioField;
    private javax.swing.JFormattedTextField CodigoMaterialField;
    private javax.swing.JButton ConParametros;
    private javax.swing.JButton EditarBtn;
    private javax.swing.JComboBox<String> LocalBox1;
    private javax.swing.JComboBox<String> LocalBox2;
    private javax.swing.JComboBox<String> MedicaoGeralBox1;
    private javax.swing.JComboBox<String> MedicaoGeralBox2;
    private javax.swing.JComboBox<String> NomeMaterialField;
    private javax.swing.JTextField OSFieldCad;
    private javax.swing.JTextField OSFieldCon;
    private javax.swing.JFormattedTextField QuantidadeMaterialField;
    private javax.swing.JComboBox<String> RequisitanteBox;
    private javax.swing.JComboBox<String> RequisitanteBox1;
    private javax.swing.JButton VoltarBtnObras;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    private void initializeDatabaseConnection() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/projetoestoque?serverTimezone=America/Sao_Paulo", "root", "1234");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            throw new SQLException("MySQL Driver not found.");
        }
    }
    
    
    private boolean isUpdating = false; // Flag para controlar atualizações

private void setupAutocomplete() {
    if (comboBox.getEditor() != null) {
        JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent();
        textField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (!isUpdating) {
                    isUpdating = true; // Marca que estamos atualizando
                    SwingUtilities.invokeLater(() -> {
                        updateAutocomplete();
                        isUpdating = false; // Marca como não atualizando
                    });
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (!isUpdating) {
                    isUpdating = true;
                    SwingUtilities.invokeLater(() -> {
                        updateAutocomplete();
                        isUpdating = false;
                    });
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (!isUpdating) {
                    isUpdating = true;
                    SwingUtilities.invokeLater(() -> {
                        updateAutocomplete();
                        isUpdating = false;
                    });
                }
            }
        });
    }

    // Adicionando DocumentListener para QuantidadeMaterialField
    QuantidadeMaterialField.getDocument().addDocumentListener(new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            if (!isUpdating) {
                isUpdating = true;
                SwingUtilities.invokeLater(() -> {
                //    updateSubtotal();
                    isUpdating = false;
                });
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            if (!isUpdating) {
                isUpdating = true;
                SwingUtilities.invokeLater(() -> {
                //    updateSubtotal();
                    isUpdating = false;
                });
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            if (!isUpdating) {
                isUpdating = true;
                SwingUtilities.invokeLater(() -> {
                //    updateSubtotal();
                    isUpdating = false;
                });
            }
        }
    });

    // Adicionando DocumentListener ao CodigoMaterialField
    CodigoMaterialField.getDocument().addDocumentListener(new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            if (!isUpdating) {
                isUpdating = true;
                SwingUtilities.invokeLater(() -> {
                    updateNomeItem();
                    isUpdating = false;
                });
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            if (!isUpdating) {
                isUpdating = true;
                SwingUtilities.invokeLater(() -> {
                    updateNomeItem();
                    isUpdating = false;
                });
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            if (!isUpdating) {
                isUpdating = true;
                SwingUtilities.invokeLater(() -> {
                    updateNomeItem();
                    isUpdating = false;
                });
            }
        }
    });

    // Adicionando FocusListener para outros campos
    FocusAdapter focusAdapter = new FocusAdapter() {
        @Override
        public void focusGained(java.awt.event.FocusEvent evt) {
            if (!isUpdating) {
                SwingUtilities.invokeLater(() -> updateNomeItem());
            }
        }
    };

    NomeMaterialField.addFocusListener(focusAdapter);
    QuantidadeMaterialField.addFocusListener(focusAdapter);

    setVisible(true);
}

    
    
    
    //RESPONSÁVEL POR FAZER O AUTOCOMPLETE QUANDO FOR PESQUISADO
    private void updateAutocomplete() {
        JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent();
        String inputText = textField.getText();

        if (inputText == null || inputText.trim().isEmpty()) {
            modelComboBox.removeAllElements();
            populateComboBox();
            return;
        }

        Set<String> uniqueSuggestions = new HashSet<>();
        modelComboBox.removeAllElements();

        try {
            String query = "SELECT NomeItem FROM projetoestoque.materiais_estoque WHERE NomeItem LIKE ?";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, "%" + inputText + "%");
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                String suggestion = rs.getString("NomeItem");
                if (uniqueSuggestions.add(suggestion)) {
                    modelComboBox.addElement(suggestion);
                }
            }

            textField.setText(inputText);
            comboBox.showPopup(); // Show the suggestion list
            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating autocomplete: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //PREENCHE O CAMPO NOME MATERIAL COM BASE NO BANCO DE DADOS 
    private void populateComboBox() {
        try {
            String query = "SELECT NomeItem FROM projetoestoque.materiais_estoque";
            PreparedStatement stmt = connection.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Assume que modelComboBox é uma instância de DefaultComboBoxModel
            DefaultComboBoxModel<String> modelComboBox = (DefaultComboBoxModel<String>) NomeMaterialField.getModel();

            while (rs.next()) {
                String item = rs.getString("NomeItem");
                boolean itemExists = false;

                // Verifica se o item já está presente no modelo
                for (int i = 0; i < modelComboBox.getSize(); i++) {
                    if (modelComboBox.getElementAt(i).equals(item)) {
                        itemExists = true;
                        break;
                    }
                }

                // Adiciona o item ao modelo se ele não existir
                if (!itemExists) {
                    modelComboBox.addElement(item);
                }
            }

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error populating combo box: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //ATUALIZA O CAMPO CÓDIGO MATERIAL COM BASE NO CAMPO NOME 
    private void updateTextFields() {
    String selectedItem = (String) NomeMaterialField.getSelectedItem();
    if (selectedItem != null) {
        System.out.println("Selected item: " + selectedItem); // Debug
        try {
            String query = "SELECT CódigoItem FROM projetoestoque.materiais_estoque WHERE NomeItem = ?;";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, selectedItem);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                // Preenche os text fields com os valores retornados
                CodigoMaterialField.setText(rs.getString("CódigoItem"));

            } else {
                // Limpar campos se não houver resultados
                System.out.println("ResultSet is empty"); // Debug
                CodigoMaterialField.setText("");


                // Aqui, você pode permitir que o usuário insira um valor manualmente
                // Para garantir que o subtotal seja atualizado
                  // Permite que o usuário insira uma quantidade
            }

            rs.close();
            stmt.close();

            // Atualiza o subtotal após qualquer alteração
          //  updateSubtotal(); // Sempre chama aqui

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating text fields: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        System.out.println("No item selected"); // Debug
        // Atualiza o subtotal, definindo como 0 se não houver seleção
       // updateSubtotal(); // Chama também aqui
    }
}
    
    private void updateNomeItem() {
    String selectedItem = CodigoMaterialField.getText().trim();
    
    // Verifica se o código tem pelo menos 1 dígito
    if (selectedItem.length() >= 1) {
        try {
            String query = "SELECT NomeItem FROM projetoestoque.materiais_estoque WHERE CódigoItem = ?";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, selectedItem);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                // Preenche os text fields com os valores retornados
                NomeMaterialField.setSelectedItem(rs.getString("NomeItem"));

            } else {
                // Não limpa os campos, apenas mantém os valores atuais
                // Caso deseje informar que não há correspondência, você pode adicionar um aviso aqui
            }

            rs.close();
            stmt.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao atualizar os campos: " + e.getMessage(),
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } 
    // Atualiza o subtotal após qualquer alteração
   // updateSubtotal();
}


private void exportarParaPlanilha(String Endereco,String OS, String Requisitante, String Responsavel) throws ClassNotFoundException {
    // Caminho da pasta onde as planilhas serão armazenadas
    String pasta = System.getProperty("user.home") + File.separator + "Desktop" + File.separator + "Planilha estoque";

    // Criar a pasta, se não existir
    File diretorio = new File(pasta);
    if (!diretorio.exists()) {
        boolean criada = diretorio.mkdir();
        if (!criada) {
            System.out.println("Erro ao criar a pasta: " + pasta);
            return;
        }
    }

    // Nome do arquivo
    String filePath = pasta + File.separator + "Saidas.xlsx";

    // Obter dados do DAO
    SaidaDAO dao = new SaidaDAO();
    List<SaidaDTO> listaConsultas = dao.ListarMedicoes(Endereco, OS, Requisitante, Responsavel);

    // Chamar o método do DAO para exportar os dados
    try {
        dao.exportarParaPlanilha(listaConsultas, filePath);
        System.out.println("Planilha exportada com sucesso: " + filePath);
    } catch (Exception e) {
        System.out.println("Erro ao exportar a planilha: " + e.getMessage());
        e.printStackTrace();
    }
}
   
    //PREENCHE TEXTFIELD COM BASE NO SELECIONADO

    private void updateLocal() {
    String selectedItem = (String) LocalBox2.getSelectedItem();
    if (selectedItem != null && !selectedItem.trim().isEmpty()) {
        System.out.println("Selected item: " + selectedItem); // Debug: Verifique o item selecionado
        try {
            String query = "SELECT OS FROM projetoestoque.obras_estoque WHERE LocalObra = ?";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, selectedItem.trim());

            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                String osValue = rs.getString("OS");
                System.out.println("Retrieved OS: " + osValue); // Debug: Valor recuperado do banco
                OSFieldCad.setText(osValue);
            } else {
                System.out.println("ResultSet is empty"); // Debug: Verifique se o ResultSet está vazio
                OSFieldCad.setText(""); // Limpa o campo se não houver resultados
            }

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating text fields: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        System.out.println("No item selected"); // Debug: Verifique se selectedItem é null
        OSFieldCad.setText(""); // Limpa o campo se não houver seleção
    }
}

    
    //PROCURA DO BANCO DE DADOS NO COMBOBOX DE LOCAL
    private void populateLocalBox() {
        try {
            String query = "SELECT LocalObra FROM projetoestoque.obras_estoque ";
            PreparedStatement stmt = connection.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Assume que modelComboBox é uma instância de DefaultComboBoxModel
            DefaultComboBoxModel<String> modelLocalBox = (DefaultComboBoxModel<String>) LocalBox2.getModel();

            while (rs.next()) {
                String item = rs.getString("LocalObra");
                boolean itemExists = false;

                // Verifica se o item já está presente no modelo
                for (int i = 0; i < modelLocalBox.getSize(); i++) {
                    if (modelLocalBox.getElementAt(i).equals(item)) {
                        itemExists = true;
                        break;
                    }
                }

                // Adiciona o item ao modelo se ele não existir
                if (!itemExists) {
                    modelLocalBox.addElement(item);
                }
            }

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error populating combo box: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //PROCURA DO BANCO DE DADOS NO COMBOBOX DE LOCAL
    private void populateLocalBox1() {
        
        try {
            String query = "SELECT LocalObra FROM projetoestoque.obras_estoque";
            PreparedStatement stmt = connection.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Assume que modelComboBox é uma instância de DefaultComboBoxModel
            DefaultComboBoxModel<String> modelLocalBox = (DefaultComboBoxModel<String>) LocalBox1.getModel();

            while (rs.next()) {
                String item = rs.getString("LocalObra");
                boolean itemExists = false;

                // Verifica se o item já está presente no modelo
                for (int i = 0; i < modelLocalBox.getSize(); i++) {
                    if (modelLocalBox.getElementAt(i).equals(item)) {
                        itemExists = true;
                        break;
                    }
                }

                // Adiciona o item ao modelo se ele não existir
                if (!itemExists) {
                    modelLocalBox.addElement(item);
                }
            }

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error populating combo box: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void ListarMedicoes() {
        
    SaidaDAO execucaoDeServicoDAO = new SaidaDAO();
    
    // Configuração do modelo da tabela
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setNumRows(0); // Limpa as linhas da tabela
    
    // Obtém o valor do campo de texto e remove espaços em branco
    
    String Endereco = (String) LocalBox1.getSelectedItem();
    String OS = OSFieldCon.getText();
    String Requisitante = (String) RequisitanteBox1.getSelectedItem();
    String Responsavel = (String) MedicaoGeralBox2.getSelectedItem();
    
    
    System.out.println("Valor do campo Endereco: '" + Endereco + "'");
    System.out.println("Valor do campo OS: '" + OS + "'");
    
    try {
        // Consulta os dados com base no valor de OS
        List<SaidaDTO> lista = execucaoDeServicoDAO.ListarMedicoes(Endereco, OS, Requisitante, Responsavel);
        
        // Verifica se a lista está vazia
        

        // Adiciona os dados ao modelo da tabela
        for (int i = 0;i < lista.size(); i++) {
            model.addRow(new Object[]{

                lista.get(i).getOS(),
                lista.get(i).getNomeMaterial(),
                lista.get(i).getCodigoMaterial(),
                lista.get(i).getQuantidade(),
                lista.get(i).getData_saida(),
                lista.get(i).getRequisitante(),
                lista.get(i).getResponsavel(),

            });
        }
        if (lista.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhum dado encontrado para o endereço fornecido.");
        } else {
            System.out.println("Dados encontrados: " + lista.size());
        }
    } catch (ClassNotFoundException e) {
        JOptionPane.showMessageDialog(null, "Erro ao consultar dados: " + e.getMessage());
        e.printStackTrace();
    }
    }
    
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    
    //APAGA OS DADOS DA LINHA SELECIONADA
    private void removerDoBanco( String nomeItem, String codigoItem, String Data_saida) {
        // Aqui você deve implementar a lógica para remover o registro do banco de dados
        Connection conn = null; // Obtenha sua conexão aqui
        PreparedStatement stmt = null;
        
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/projetoestoque?serverTimezone=America/Sao_Paulo", "root", "1234");
             System.out.println("Conexão estabelecida com sucesso!");// Ajuste conforme necessário
            
            
           String sql = "DELETE FROM projetoestoque.execucaoestoque WHERE NomeMaterial = ? AND CodigoMaterial = ? AND Data_saida = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, nomeItem);
            stmt.setString(2, codigoItem);
            stmt.setString(3, Data_saida);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao apagar registro do banco.");
        } finally {
            // Feche a conexão e o statement, se necessário
            try {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

   

    
  private void editarNoBanco(
                            String nomeItem, String codigoItemAntigo,
                            String novoCodigoItem, String quantidade,
                            String data, String Requisitante, String Responsavel
                            ) {
    Connection conn = null;
    PreparedStatement stmt = null;

    try {
        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/projetoestoque?serverTimezone=America/Sao_Paulo", "root", "1234");
        
        // Começa a construção da SQL
        StringBuilder sql = new StringBuilder("UPDATE projetoestoque.execucaoestoque SET ");
        List<String> updates = new ArrayList<>();

        // Adiciona apenas os campos que não são nulos
        if (nomeItem != null) updates.add("NomeMaterial = ?");
        if (novoCodigoItem != null) updates.add("CodigoMaterial = ?");
        if (quantidade != null) updates.add("Quantidade = ?");
        if (data != null) updates.add("Data_saida = ?");
        if (Requisitante != null) updates.add("Requisitante = ?");
        if (Responsavel != null) updates.add("Responsavel = ?");


        // Verifica se algum campo foi passado para atualização
        if (updates.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhum campo para atualizar.");
            return;
        }

        // Adiciona os updates à SQL
        sql.append(String.join(", ", updates));
        sql.append(" WHERE CodigoMaterial = ?"); // Condições para identificar o registro

        stmt = conn.prepareStatement(sql.toString());

        // Preenche os parâmetros
        int index = 1;


        if (nomeItem != null) stmt.setString(index++, nomeItem);
        if (novoCodigoItem != null) stmt.setString(index++, novoCodigoItem);
        if (quantidade != null) stmt.setString(index++, quantidade);
        if (data != null) stmt.setString(index++, data);
        if (Requisitante != null) stmt.setString(index++, Requisitante);
        if (Responsavel != null) stmt.setString(index++, Responsavel);
   

        // Adiciona os parâmetros de filtro 
        stmt.setString(index++, codigoItemAntigo); // Usar o código antigo do material

        // Execute a atualização
        stmt.executeUpdate();
        JOptionPane.showMessageDialog(null, "Registro editado com sucesso!");
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Erro ao editar registro no banco.");
    } finally {
        try {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}

}